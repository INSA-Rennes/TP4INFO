/* TP1 - Producteur/consommateur */
/* Damien Crémilleux - Lauriane Holy */

#include <pthread.h>
#include <stdio.h>
#define NB_VALEUR 10

int cpt;

int tampon[NB_VALEUR];
int nb_val;			/* nombre de valeur présentes dans le tableau */
int indice_prod;
int indice_consom; 

int plein()
{
  return nb_val == NB_VALEUR;
}

int vide()
{
  return nb_val == 0;
}

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t producteur = PTHREAD_COND_INITIALIZER;
pthread_cond_t consommateur = PTHREAD_COND_INITIALIZER;

void put(int v)
{
  pthread_mutex_lock(&mutex);
  while(plein())
    {
      pthread_cond_wait(&producteur, &mutex);
    }
  tampon[indice_prod] = v;
  indice_prod = (indice_prod++)%NB_VALEUR;
  nb_val++;

  pthread_mutex_unlock(&mutex);
  pthread_cond_signal(&consommateur);
}



int get()
{
  int v;
  pthread_mutex_lock(&mutex);
  while(vide())
    {
      pthread_cond_wait(&consommateur, &mutex);
    }
  v = tampon[indice_prod];
  indice_prod = (indice_prod++)%NB_VALEUR;
  nb_val--;

  pthread_mutex_unlock(&mutex);
  pthread_cond_signal(&producteur);
  
  return v; 
}

void Nb_get()
{
  int i;
  for (i =0; i < NB_VALEUR/2; i++)
    {
      get();
    }
}

void Nb_put()
{
  printf("top");
  int i;
  for (i =0; i < NB_VALEUR/2; i++)
    {
      put(2);
    }
}

void affiche()
{
  int i;
  printf("Tampon : ");
  i =0;
  for (i=0; i< NB_VALEUR; i++)
    {
      if(i<indice_consom)
	printf(" -1 ");

      if (i>=indice_prod && i<indice_consom)
	printf(" %d ", tampon[i]);

      if (i>=indice_consom)
	printf(" -1 ");
    }
  printf("\n");
}

int main(int argc, char* argv[])
{
  cpt =0;
  indice_prod =0;
  indice_consom = 0;
  nb_val = 0;

  while(1)
    {
      affiche();

      char action;
      printf("Bonjour, que voulez vous faire ? c -> consommer p-> produire\n");
      scanf(" %c", &action);
      if (action  == 'c')
	{
	  int thr_id;
	  pthread_t p_thread;
	  pthread_attr_t attr;
	  int a = cpt;
	  
	  pthread_attr_init(&attr);
	  thr_id = pthread_create(&p_thread,&attr, Nb_get, (void*) &a);
	}
      
      if (action  == 'p')
	{
	  int thr_id;
	  pthread_t p_thread;
	  pthread_attr_t attr;
	  int a = cpt;
	  
	  pthread_attr_init(&attr);
	  thr_id = pthread_create(&p_thread,&attr, Nb_put, (void*) &a);
	}
    }
 
  return 0;
}
