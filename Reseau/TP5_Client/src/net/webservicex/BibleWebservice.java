
package net.webservicex;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "BibleWebservice", targetNamespace = "http://www.webserviceX.NET", wsdlLocation = "http://www.webservicex.net/BibleWebservice.asmx?WSDL")
public class BibleWebservice
    extends Service
{

    private final static URL BIBLEWEBSERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(net.webservicex.BibleWebservice.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = net.webservicex.BibleWebservice.class.getResource(".");
            url = new URL(baseUrl, "http://www.webservicex.net/BibleWebservice.asmx?WSDL");
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'http://www.webservicex.net/BibleWebservice.asmx?WSDL', retrying as a local file");
            logger.warning(e.getMessage());
        }
        BIBLEWEBSERVICE_WSDL_LOCATION = url;
    }

    public BibleWebservice(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public BibleWebservice() {
        super(BIBLEWEBSERVICE_WSDL_LOCATION, new QName("http://www.webserviceX.NET", "BibleWebservice"));
    }

    /**
     * 
     * @return
     *     returns BibleWebserviceSoap
     */
    @WebEndpoint(name = "BibleWebserviceSoap")
    public BibleWebserviceSoap getBibleWebserviceSoap() {
        return super.getPort(new QName("http://www.webserviceX.NET", "BibleWebserviceSoap"), BibleWebserviceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BibleWebserviceSoap
     */
    @WebEndpoint(name = "BibleWebserviceSoap")
    public BibleWebserviceSoap getBibleWebserviceSoap(WebServiceFeature... features) {
        return super.getPort(new QName("http://www.webserviceX.NET", "BibleWebserviceSoap"), BibleWebserviceSoap.class, features);
    }

}
